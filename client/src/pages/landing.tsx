import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { Utensils, Clock, Carrot, Heart, Sparkles, BookOpen } from "lucide-react";
import { type User } from "@shared/schema";

export default function Landing() {
  const [isSignUp, setIsSignUp] = useState(false);
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [showAuth, setShowAuth] = useState(false);
  const { toast } = useToast();

  const signUpMutation = useMutation({
    mutationFn: async (data: { name: string; email: string }) => {
      const res = await apiRequest("POST", "/api/signup", data);
      return await res.json() as User;
    },
    onSuccess: (user) => {
      queryClient.setQueryData(["/api/user"], user);
      toast({
        title: "Welcome to ChronoChef!",
        description: "Your account has been created successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Sign up failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const signInMutation = useMutation({
    mutationFn: async (data: { email: string }) => {
      const res = await apiRequest("POST", "/api/signin", data);
      return await res.json() as User;
    },
    onSuccess: (user) => {
      queryClient.setQueryData(["/api/user"], user);
      toast({
        title: "Welcome back!",
        description: "You've been signed in successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Sign in failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!email) {
      toast({
        title: "Email required",
        description: "Please enter your email address.",
        variant: "destructive",
      });
      return;
    }

    if (isSignUp) {
      if (!name) {
        toast({
          title: "Name required",
          description: "Please enter your name.",
          variant: "destructive",
        });
        return;
      }
      signUpMutation.mutate({ name, email });
    } else {
      signInMutation.mutate({ email });
    }
  };

  return (
    <div className="min-h-screen bg-gradient-dark">
      {/* Header */}
      <header className="glass sticky top-0 z-50">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center animate-glow">
                <Utensils className="text-dark-slate text-lg" />
              </div>
              <h1 className="text-2xl font-bold text-foreground">ChronoChef</h1>
            </div>
            <Button 
              onClick={() => setShowAuth(true)}
              className="btn-primary text-white"
            >
              Sign In
            </Button>
          </div>
        </div>
      </header>

      <main className="max-w-4xl mx-auto px-4 py-8">
        {/* Hero Section */}
        <section className="text-center mb-16">
          <div className="mb-8">
            <h2 className="text-5xl md:text-6xl font-bold text-foreground mb-6">
              AI-Powered Recipe Discovery
            </h2>
            <p className="text-xl text-muted-foreground max-w-3xl mx-auto mb-8">
              Transform your cooking experience with personalized recipes generated by AI. 
              Tell us your time, ingredients, and mood - we'll create the perfect meal for you.
            </p>
            <Button 
              onClick={() => setShowAuth(true)}
              className="btn-primary text-white px-8 py-4 text-lg"
            >
              Get Started Free
            </Button>
          </div>
        </section>

        {/* Features Section */}
        <section className="grid md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16">
          <div className="glass-card p-6 text-center">
            <div className="w-16 h-16 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center mx-auto mb-4">
              <Clock className="text-dark-slate text-2xl" />
            </div>
            <h3 className="text-lg font-semibold text-foreground mb-2">Time-Based</h3>
            <p className="text-muted-foreground text-sm">
              Get recipes that fit your schedule, from quick 15-minute meals to elaborate feasts
            </p>
          </div>
          
          <div className="glass-card p-6 text-center">
            <div className="w-16 h-16 bg-gradient-to-r from-secondary to-primary rounded-full flex items-center justify-center mx-auto mb-4">
              <Carrot className="text-dark-slate text-2xl" />
            </div>
            <h3 className="text-lg font-semibold text-foreground mb-2">Ingredient-Smart</h3>
            <p className="text-muted-foreground text-sm">
              Use what you have on hand. Our AI creates recipes with your available ingredients
            </p>
          </div>
          
          <div className="glass-card p-6 text-center">
            <div className="w-16 h-16 bg-gradient-to-r from-accent to-secondary rounded-full flex items-center justify-center mx-auto mb-4">
              <Heart className="text-dark-slate text-2xl" />
            </div>
            <h3 className="text-lg font-semibold text-foreground mb-2">Mood-Driven</h3>
            <p className="text-muted-foreground text-sm">
              Whether you want comfort food or healthy options, we match your culinary mood
            </p>
          </div>
          
          <div className="glass-card p-6 text-center">
            <div className="w-16 h-16 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center mx-auto mb-4">
              <BookOpen className="text-dark-slate text-2xl" />
            </div>
            <h3 className="text-lg font-semibold text-foreground mb-2">Personal Collection</h3>
            <p className="text-muted-foreground text-sm">
              Save your favorite recipes and build your personalized cookbook over time
            </p>
          </div>
        </section>

        {/* How It Works */}
        <section className="mb-16">
          <h3 className="text-3xl font-bold text-foreground text-center mb-12">
            How ChronoChef Works
          </h3>
          <div className="grid md:grid-cols-3 gap-8">
            <div className="text-center">
              <div className="w-12 h-12 bg-primary text-dark-slate rounded-full flex items-center justify-center mx-auto mb-4 text-xl font-bold">
                1
              </div>
              <h4 className="text-xl font-semibold text-foreground mb-2">Tell Us Your Preferences</h4>
              <p className="text-muted-foreground">
                Input your available cooking time, ingredients on hand, and current culinary mood
              </p>
            </div>
            
            <div className="text-center">
              <div className="w-12 h-12 bg-secondary text-dark-slate rounded-full flex items-center justify-center mx-auto mb-4 text-xl font-bold">
                2
              </div>
              <h4 className="text-xl font-semibold text-foreground mb-2">AI Creates Your Recipes</h4>
              <p className="text-muted-foreground">
                Our advanced AI analyzes your input and generates 1-3 personalized recipes just for you
              </p>
            </div>
            
            <div className="text-center">
              <div className="w-12 h-12 bg-accent text-dark-slate rounded-full flex items-center justify-center mx-auto mb-4 text-xl font-bold">
                3
              </div>
              <h4 className="text-xl font-semibold text-foreground mb-2">Cook & Save Favorites</h4>
              <p className="text-muted-foreground">
                Follow the detailed instructions and save recipes you love to your personal collection
              </p>
            </div>
          </div>
        </section>

        {/* CTA Section */}
        <section className="text-center glass-card p-12">
          <h3 className="text-3xl font-bold text-foreground mb-4">
            Ready to Transform Your Cooking?
          </h3>
          <p className="text-lg text-muted-foreground mb-8 max-w-2xl mx-auto">
            Join thousands of home cooks who have discovered the joy of AI-powered recipe generation. 
            Start creating your perfect meals today.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button 
              onClick={() => setShowAuth(true)}
              className="btn-primary text-white px-8 py-4 text-lg"
            >
              <Utensils className="mr-2 h-5 w-5" />
              Start Cooking Now
            </Button>
            <Button 
              onClick={() => setShowAuth(true)}
              className="btn-secondary text-white px-8 py-4 text-lg"
            >
              <Sparkles className="mr-2 h-5 w-5" />
              Try Surprise Me!
            </Button>
          </div>
        </section>

        {/* Authentication Modal */}
        {showAuth && (
          <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
            <Card className="w-full max-w-md bg-slate-800/95 backdrop-blur-xl border-slate-700">
              <CardHeader>
                <CardTitle className="text-white text-center">
                  {isSignUp ? "Create Account" : "Welcome Back"}
                </CardTitle>
                <CardDescription className="text-slate-300 text-center">
                  {isSignUp 
                    ? "Sign up with your name and email to get started" 
                    : "Enter your email to continue"
                  }
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-4">
                  {isSignUp && (
                    <div>
                      <Label htmlFor="name" className="text-slate-200">Name</Label>
                      <Input
                        id="name"
                        type="text"
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                        placeholder="Enter your name"
                        className="bg-slate-700/50 border-slate-600 text-white placeholder:text-slate-400"
                        required={isSignUp}
                      />
                    </div>
                  )}
                  <div>
                    <Label htmlFor="email" className="text-slate-200">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      placeholder="Enter your email"
                      className="bg-slate-700/50 border-slate-600 text-white placeholder:text-slate-400"
                      required
                    />
                  </div>
                  <div className="flex gap-2">
                    <Button 
                      type="submit"
                      disabled={signUpMutation.isPending || signInMutation.isPending}
                      className="flex-1 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-semibold rounded-lg shadow-lg hover:shadow-xl transition-all duration-300"
                    >
                      {signUpMutation.isPending || signInMutation.isPending 
                        ? "Please wait..." 
                        : isSignUp ? "Create Account" : "Sign In"
                      }
                    </Button>
                    <Button 
                      type="button"
                      onClick={() => setShowAuth(false)}
                      variant="outline"
                      className="border-slate-600 text-slate-300 hover:bg-slate-700"
                    >
                      Cancel
                    </Button>
                  </div>
                </form>
                
                <div className="mt-4 text-center">
                  <button
                    type="button"
                    onClick={() => setIsSignUp(!isSignUp)}
                    className="text-purple-400 hover:text-purple-300 text-sm transition-colors"
                  >
                    {isSignUp 
                      ? "Already have an account? Sign in" 
                      : "New to ChronoChef? Create account"
                    }
                  </button>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </main>

      {/* Footer */}
      <footer className="bg-surface-elevated border-t border-border py-8 mt-16">
        <div className="max-w-4xl mx-auto px-4 text-center">
          <div className="flex items-center justify-center space-x-3 mb-4">
            <div className="w-8 h-8 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center">
              <Utensils className="text-dark-slate text-sm" />
            </div>
            <span className="text-lg font-semibold text-foreground">ChronoChef</span>
          </div>
          <p className="text-muted-foreground">Discover your perfect recipe, one mood at a time.</p>
        </div>
      </footer>
    </div>
  );
}